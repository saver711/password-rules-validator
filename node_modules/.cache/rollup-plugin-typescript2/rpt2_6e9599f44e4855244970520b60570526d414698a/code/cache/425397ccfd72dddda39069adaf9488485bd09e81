{"code":"import React, { useEffect, useMemo } from \"react\";\r\nconst PasswordRulesValidator = ({ className, style, rules, value, valueAgain, minLength, maxLength, rtl, onChange, specialCharsRegex = /[~`¿¡!#$%\\^&*€£@+÷=\\-\\[\\]\\\\';,/{}\\(\\)|\\\\\":<>\\?\\.\\_]/g, messages = {}, ...remainingProps }) => {\r\n    const ruleDefinitions = {\r\n        minLength: {\r\n            valid: value.length >= (minLength || 100),\r\n            message: messages.minLength || `Password has at least ${minLength} characters.`\r\n        },\r\n        specialChar: {\r\n            valid: specialCharsRegex.test(value),\r\n            message: messages.specialChar || \"Password has special characters.\"\r\n        },\r\n        number: {\r\n            valid: /\\d/g.test(value),\r\n            message: messages.number || \"Password has a number.\"\r\n        },\r\n        noSpaces: {\r\n            valid: !value.includes(\" \"),\r\n            message: messages.noSpaces || \"Password has spaces.\"\r\n        },\r\n        capital: {\r\n            valid: (() => {\r\n                var i = 0;\r\n                if (value.length === 0) {\r\n                    return false;\r\n                }\r\n                while (i < value.length) {\r\n                    const character = value.charAt(i);\r\n                    if (character == character.toLowerCase()) {\r\n                        // Character is lowercase, numeric, or a symbol\r\n                    }\r\n                    else if (character == character.toUpperCase()) {\r\n                        return true;\r\n                    }\r\n                    i++;\r\n                }\r\n                return false;\r\n            })(),\r\n            message: messages.capital || \"Password has a capital letter.\"\r\n        },\r\n        match: {\r\n            valid: value.length > 0 && value === valueAgain,\r\n            message: messages.match || \"Passwords match.\"\r\n        },\r\n        lowercase: {\r\n            valid: (() => {\r\n                var i = 0;\r\n                if (value.length === 0) {\r\n                    return false;\r\n                }\r\n                while (i < value.length) {\r\n                    const character = value.charAt(i);\r\n                    if (character == character.toUpperCase()) {\r\n                        // Character is lowercase, numeric, or a symbol\r\n                    }\r\n                    else if (character == character.toLowerCase()) {\r\n                        return true;\r\n                    }\r\n                    i++;\r\n                }\r\n                return false;\r\n            })(),\r\n            message: messages.lowercase || \"Password has a lowercase letter.\"\r\n        },\r\n        letter: {\r\n            valid: /[a-zA-Z]/g.test(value),\r\n            message: messages.letter || \"Password has a letter.\"\r\n        },\r\n        maxLength: {\r\n            valid: value.length <= (maxLength || 16),\r\n            message: messages.maxLength ||\r\n                `Password has no more than ${maxLength} characters.`\r\n        },\r\n        notEmpty: {\r\n            valid: Boolean(value.length > 0 && valueAgain && valueAgain.length > 0),\r\n            message: messages.notEmpty || \"Password fields are not empty.\"\r\n        }\r\n    };\r\n    const enabledRules = useMemo(() => rules.filter(rule => Boolean(ruleDefinitions[rule])), [rules]);\r\n    const isValid = enabledRules.every(rule => ruleDefinitions[rule].valid);\r\n    const failedRules = useMemo(() => enabledRules.filter(rule => !ruleDefinitions[rule].valid), [value, valueAgain, enabledRules]);\r\n    useEffect(() => {\r\n        if (typeof onChange === \"function\") {\r\n            onChange(isValid, failedRules);\r\n        }\r\n    }, [isValid, failedRules]);\r\n    if (rtl) {\r\n        className = className ? className + \" rtl\" : \"rtl\";\r\n    }\r\n    return (React.createElement(\"ul\", { className: className, style: {\r\n            margin: 0,\r\n            padding: 0,\r\n            ...style\r\n        } }, enabledRules.map(rule => {\r\n        const { message, valid } = ruleDefinitions[rule];\r\n        return (React.createElement(Rule, Object.assign({ key: rule, valid: valid, iconSize: 18, validColor: \"#4BCA81\", invalidColor: \"#FF0033\", rtl: rtl }, remainingProps), message));\r\n    })));\r\n};\r\nconst Rule = ({ valid, iconSize, validColor, invalidColor, validTextColor, invalidTextColor, iconComponents, hideIcon, rtl, children }) => {\r\n    return (React.createElement(\"li\", { className: valid ? \"valid\" : \"invalid\", style: {\r\n            listStyleType: \"none\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            margin: \"2px 0\"\r\n        } },\r\n        !hideIcon ? (iconComponents ? (valid ? (iconComponents.ValidIcon) : (iconComponents.InvalidIcon)) : (React.createElement(\"svg\", { className: \"checklist-icon\", version: \"1.1\", xmlns: \"http://www.w3.org/2000/svg\", width: iconSize, height: iconSize, viewBox: \"0 0 512 512\", style: { marginRight: rtl ? 0 : 5, marginLeft: rtl ? 5 : 0 } },\r\n            React.createElement(\"path\", { fill: valid ? validColor : invalidColor, d: valid\r\n                    ? \"M432 64l-240 240-112-112-80 80 192 192 320-320z\"\r\n                    : \"M507.331 411.33c-0.002-0.002-0.004-0.004-0.006-0.005l-155.322-155.325 155.322-155.325c0.002-0.002 0.004-0.003 0.006-0.005 1.672-1.673 2.881-3.627 3.656-5.708 2.123-5.688 0.912-12.341-3.662-16.915l-73.373-73.373c-4.574-4.573-11.225-5.783-16.914-3.66-2.080 0.775-4.035 1.984-5.709 3.655 0 0.002-0.002 0.003-0.004 0.005l-155.324 155.326-155.324-155.325c-0.002-0.002-0.003-0.003-0.005-0.005-1.673-1.671-3.627-2.88-5.707-3.655-5.69-2.124-12.341-0.913-16.915 3.66l-73.374 73.374c-4.574 4.574-5.784 11.226-3.661 16.914 0.776 2.080 1.985 4.036 3.656 5.708 0.002 0.001 0.003 0.003 0.005 0.005l155.325 155.324-155.325 155.326c-0.001 0.002-0.003 0.003-0.004 0.005-1.671 1.673-2.88 3.627-3.657 5.707-2.124 5.688-0.913 12.341 3.661 16.915l73.374 73.373c4.575 4.574 11.226 5.784 16.915 3.661 2.080-0.776 4.035-1.985 5.708-3.656 0.001-0.002 0.003-0.003 0.005-0.005l155.324-155.325 155.324 155.325c0.002 0.001 0.004 0.003 0.006 0.004 1.674 1.672 3.627 2.881 5.707 3.657 5.689 2.123 12.342 0.913 16.914-3.661l73.373-73.374c4.574-4.574 5.785-11.227 3.662-16.915-0.776-2.080-1.985-4.034-3.657-5.707z\" })))) : null,\r\n        React.createElement(\"span\", { style: {\r\n                paddingTop: 2,\r\n                opacity: valid ? 1 : !invalidTextColor ? 0.5 : undefined,\r\n                flex: 1,\r\n                color: valid ? validTextColor : invalidTextColor\r\n            } }, children)));\r\n};\r\nexport default PasswordRulesValidator;\r\n//# sourceMappingURL=password-rules-validator.js.map","references":["F:/libraries/password-rules-validator/node_modules/@types/react/ts5.0/index.d.ts"],"map":"{\"version\":3,\"file\":\"password-rules-validator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/components/password-rules-validator.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"F:/libraries/password-rules-validator/components/password-rules-validator.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\r\ninterface CustomIconComponents {\r\n    ValidIcon: React.ReactNode;\r\n    InvalidIcon: React.ReactNode;\r\n}\r\ninterface PasswordProps {\r\n    value: string;\r\n    valueAgain?: string;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    iconSize?: number;\r\n    validColor?: string;\r\n    invalidColor?: string;\r\n    validTextColor?: string;\r\n    invalidTextColor?: string;\r\n    onChange?: (isValid: boolean, failedRules: RuleNames[]) => any;\r\n    messages?: {\r\n        [key in RuleNames]?: string;\r\n    };\r\n    iconComponents?: CustomIconComponents;\r\n}\r\nexport declare type RuleNames = \"minLength\" | \"maxLength\" | \"specialChar\" | \"number\" | \"capital\" | \"match\" | \"lowercase\" | \"letter\" | \"notEmpty\" | \"noSpaces\";\r\nexport interface PasswordRulesValidatorProps extends PasswordProps {\r\n    className?: string;\r\n    style?: React.CSSProperties;\r\n    rules: Array<RuleNames>;\r\n    rtl?: boolean;\r\n    hideIcon?: boolean;\r\n    specialCharsRegex?: RegExp;\r\n}\r\nexport interface RuleProps {\r\n    valid: boolean;\r\n    iconSize?: number;\r\n    iconComponents?: CustomIconComponents;\r\n    validColor?: string;\r\n    invalidColor?: string;\r\n    validTextColor?: string;\r\n    invalidTextColor?: string;\r\n    rtl?: boolean;\r\n    hideIcon?: boolean;\r\n    children?: React.ReactNode;\r\n}\r\ndeclare const PasswordRulesValidator: React.FC<PasswordRulesValidatorProps>;\r\nexport default PasswordRulesValidator;\r\n"}}
