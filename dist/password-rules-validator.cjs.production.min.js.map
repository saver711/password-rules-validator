{"version":3,"file":"password-rules-validator.cjs.production.min.js","sources":["../src/components/password-rules-validator.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\"\r\ninterface CustomIconComponents {\r\n  ValidIcon: React.ReactNode\r\n  InvalidIcon: React.ReactNode\r\n}\r\ninterface PasswordProps {\r\n  value: string\r\n  valueAgain?: string\r\n  minLength?: number\r\n  maxLength?: number\r\n  iconSize?: number\r\n  validColor?: string\r\n  invalidColor?: string\r\n  validTextColor?: string\r\n  invalidTextColor?: string\r\n  onChange?: (isValid: boolean, failedRules: RuleNames[]) => any\r\n  messages?: {\r\n    [key in RuleNames]?: string\r\n  }\r\n  iconComponents?: CustomIconComponents\r\n}\r\n\r\nexport type RuleNames =\r\n  | \"minLength\"\r\n  | \"maxLength\"\r\n  | \"specialChar\"\r\n  | \"number\"\r\n  | \"capital\"\r\n  | \"match\"\r\n  | \"lowercase\"\r\n  | \"letter\"\r\n  | \"notEmpty\"\r\n  | \"noSpaces\"\r\n\r\nexport interface PasswordRulesValidatorProps extends PasswordProps {\r\n  className?: string\r\n  style?: React.CSSProperties\r\n  rules: Array<RuleNames>\r\n  rtl?: boolean\r\n  hideIcon?: boolean\r\n  specialCharsRegex?: RegExp\r\n}\r\n\r\nexport interface RuleProps {\r\n  valid: boolean\r\n  iconSize?: number\r\n  iconComponents?: CustomIconComponents\r\n  validColor?: string\r\n  invalidColor?: string\r\n  validTextColor?: string\r\n  invalidTextColor?: string\r\n  rtl?: boolean\r\n  hideIcon?: boolean\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst PasswordRulesValidator: React.FC<PasswordRulesValidatorProps> = ({\r\n  className,\r\n  style,\r\n  rules,\r\n  value,\r\n  valueAgain,\r\n  minLength,\r\n  maxLength,\r\n  rtl,\r\n  onChange,\r\n  specialCharsRegex = /[~`¿¡!#$%\\^&*€£@+÷=\\-\\[\\]\\\\';,/{}\\(\\)|\\\\\":<>\\?\\.\\_]/g,\r\n  messages = {},\r\n  ...remainingProps\r\n}) => {\r\n  const ruleDefinitions: {\r\n    [key in RuleNames]: { valid: boolean; message: string }\r\n  } = {\r\n    minLength: {\r\n      valid: value.length >= (minLength || 100),\r\n      message:\r\n        messages.minLength || `Password has at least ${minLength} characters.`\r\n    },\r\n    specialChar: {\r\n      valid: specialCharsRegex.test(value),\r\n      message: messages.specialChar || \"Password has special characters.\"\r\n    },\r\n    number: {\r\n      valid: /\\d/g.test(value),\r\n      message: messages.number || \"Password has a number.\"\r\n    },\r\n    noSpaces: {\r\n      valid: !value.includes(\" \"),\r\n      message: messages.noSpaces || \"Password has spaces.\"\r\n    },\r\n    capital: {\r\n      valid: (() => {\r\n        var i = 0\r\n        if (value.length === 0) {\r\n          return false\r\n        }\r\n        while (i < value.length) {\r\n          const character = value.charAt(i)\r\n          if (character == character.toLowerCase()) {\r\n            // Character is lowercase, numeric, or a symbol\r\n          } else if (character == character.toUpperCase()) {\r\n            return true\r\n          }\r\n          i++\r\n        }\r\n        return false\r\n      })(),\r\n      message: messages.capital || \"Password has a capital letter.\"\r\n    },\r\n    match: {\r\n      valid: value.length > 0 && value === valueAgain,\r\n      message: messages.match || \"Passwords match.\"\r\n    },\r\n    lowercase: {\r\n      valid: (() => {\r\n        var i = 0\r\n        if (value.length === 0) {\r\n          return false\r\n        }\r\n        while (i < value.length) {\r\n          const character = value.charAt(i)\r\n          if (character == character.toUpperCase()) {\r\n            // Character is lowercase, numeric, or a symbol\r\n          } else if (character == character.toLowerCase()) {\r\n            return true\r\n          }\r\n          i++\r\n        }\r\n        return false\r\n      })(),\r\n      message: messages.lowercase || \"Password has a lowercase letter.\"\r\n    },\r\n    letter: {\r\n      valid: /[a-zA-Z]/g.test(value),\r\n      message: messages.letter || \"Password has a letter.\"\r\n    },\r\n    maxLength: {\r\n      valid: value.length <= (maxLength || 16),\r\n      message:\r\n        messages.maxLength ||\r\n        `Password has no more than ${maxLength} characters.`\r\n    },\r\n    notEmpty: {\r\n      valid: Boolean(value.length > 0 && valueAgain && valueAgain.length > 0),\r\n      message: messages.notEmpty || \"Password fields are not empty.\"\r\n    }\r\n  }\r\n  const enabledRules: RuleNames[] = useMemo(\r\n    () => rules.filter(rule => Boolean(ruleDefinitions[rule])),\r\n    [rules]\r\n  )\r\n  const isValid: boolean = enabledRules.every(\r\n    rule => ruleDefinitions[rule].valid\r\n  )\r\n  const failedRules: RuleNames[] = useMemo(\r\n    () => enabledRules.filter(rule => !ruleDefinitions[rule].valid),\r\n    [value, valueAgain, enabledRules]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (typeof onChange === \"function\") {\r\n      onChange(isValid, failedRules)\r\n    }\r\n  }, [isValid, failedRules])\r\n\r\n  if (rtl) {\r\n    className = className ? className + \" rtl\" : \"rtl\"\r\n  }\r\n\r\n  return (\r\n    <ul\r\n      className={className}\r\n      style={{\r\n        margin: 0,\r\n        padding: 0,\r\n        ...style\r\n      }}\r\n    >\r\n      {enabledRules.map(rule => {\r\n        const { message, valid } = ruleDefinitions[rule]\r\n        return (\r\n          <Rule\r\n            key={rule}\r\n            valid={valid}\r\n            iconSize={18}\r\n            validColor=\"#4BCA81\"\r\n            invalidColor=\"#FF0033\"\r\n            rtl={rtl}\r\n            {...remainingProps}\r\n          >\r\n            {message}\r\n          </Rule>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst Rule: React.FC<RuleProps> = ({\r\n  valid,\r\n  iconSize,\r\n  validColor,\r\n  invalidColor,\r\n  validTextColor,\r\n  invalidTextColor,\r\n  iconComponents,\r\n  hideIcon,\r\n  rtl,\r\n  children\r\n}) => {\r\n  return (\r\n    <li\r\n      className={valid ? \"valid\" : \"invalid\"}\r\n      style={{\r\n        listStyleType: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        margin: \"2px 0\"\r\n      }}\r\n    >\r\n      {!hideIcon ? (\r\n        iconComponents ? (\r\n          valid ? (\r\n            iconComponents.ValidIcon\r\n          ) : (\r\n            iconComponents.InvalidIcon\r\n          )\r\n        ) : (\r\n          <svg\r\n            className=\"checklist-icon\"\r\n            version=\"1.1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width={iconSize}\r\n            height={iconSize}\r\n            viewBox=\"0 0 512 512\"\r\n            style={{ marginRight: rtl ? 0 : 5, marginLeft: rtl ? 5 : 0 }}\r\n          >\r\n            <path\r\n              fill={valid ? validColor : invalidColor}\r\n              d={\r\n                valid\r\n                  ? \"M432 64l-240 240-112-112-80 80 192 192 320-320z\"\r\n                  : \"M507.331 411.33c-0.002-0.002-0.004-0.004-0.006-0.005l-155.322-155.325 155.322-155.325c0.002-0.002 0.004-0.003 0.006-0.005 1.672-1.673 2.881-3.627 3.656-5.708 2.123-5.688 0.912-12.341-3.662-16.915l-73.373-73.373c-4.574-4.573-11.225-5.783-16.914-3.66-2.080 0.775-4.035 1.984-5.709 3.655 0 0.002-0.002 0.003-0.004 0.005l-155.324 155.326-155.324-155.325c-0.002-0.002-0.003-0.003-0.005-0.005-1.673-1.671-3.627-2.88-5.707-3.655-5.69-2.124-12.341-0.913-16.915 3.66l-73.374 73.374c-4.574 4.574-5.784 11.226-3.661 16.914 0.776 2.080 1.985 4.036 3.656 5.708 0.002 0.001 0.003 0.003 0.005 0.005l155.325 155.324-155.325 155.326c-0.001 0.002-0.003 0.003-0.004 0.005-1.671 1.673-2.88 3.627-3.657 5.707-2.124 5.688-0.913 12.341 3.661 16.915l73.374 73.373c4.575 4.574 11.226 5.784 16.915 3.661 2.080-0.776 4.035-1.985 5.708-3.656 0.001-0.002 0.003-0.003 0.005-0.005l155.324-155.325 155.324 155.325c0.002 0.001 0.004 0.003 0.006 0.004 1.674 1.672 3.627 2.881 5.707 3.657 5.689 2.123 12.342 0.913 16.914-3.661l73.373-73.374c4.574-4.574 5.785-11.227 3.662-16.915-0.776-2.080-1.985-4.034-3.657-5.707z\"\r\n              }\r\n            />\r\n          </svg>\r\n        )\r\n      ) : null}\r\n      <span\r\n        style={{\r\n          paddingTop: 2,\r\n          opacity: valid ? 1 : !invalidTextColor ? 0.5 : undefined,\r\n          flex: 1,\r\n          color: valid ? validTextColor : invalidTextColor\r\n        }}\r\n      >\r\n        {children}\r\n      </span>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default PasswordRulesValidator\r\n"],"names":["Rule","_ref2","valid","iconSize","validTextColor","invalidTextColor","iconComponents","rtl","children","React","className","style","listStyleType","display","alignItems","margin","hideIcon","ValidIcon","InvalidIcon","version","xmlns","width","height","viewBox","marginRight","marginLeft","fill","validColor","invalidColor","d","paddingTop","opacity","undefined","flex","color","_ref","rules","value","valueAgain","minLength","maxLength","onChange","_ref$specialCharsRege","specialCharsRegex","_ref$messages","messages","remainingProps","_objectWithoutPropertiesLoose","_excluded","ruleDefinitions","length","message","specialChar","test","number","noSpaces","includes","capital","i","character","charAt","toLowerCase","toUpperCase","match","lowercase","letter","notEmpty","Boolean","enabledRules","useMemo","filter","rule","isValid","every","failedRules","useEffect","_extends","padding","map","_ruleDefinitions$rule","key"],"mappings":"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"}